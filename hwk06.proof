#|

 CS 2800 Homework 6 - Fall 2023

 - Due on Tuesday, Oct. 24 by 10:00 PM.

 - You will have to work in groups. Groups should consist of 2-3
   people. Make sure you are in exactly 1 group!  Use the
   piazza "search for teammates" post to find teammates. Please give
   students who don't have a team a home. If you can't find a team ask
   Ankit for help on Piazza. 

 - You will submit your hwk via gradescope. Instructions on how to
   do that are on Piazza. If you need help, ask on Piazza.

 - Submit the homework file (this file) on Gradescope. After clicking
   on "Upload", you must add your group members to the submission by
   clicking on "Add Group Member" and then filling their names. Every
   group member can submit the homework and we will only grade the
   last submission. You are responsible for making sure that your
   group submits the right version of the homework for your final
   submission. We suggest you submit early and often. Also, you will
   get feedback on some problems when you submit. However, this
   feedback does not determine your final grade, as we will manually
   review submissions. Submission will be enabled a few days after the
   homework is released, but well before the deadline.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 For this homework you will need to use ACL2s.

 Technical instructions:

 - Open this file in ACL2s.

 - Make sure you are in ACL2s mode. This is essential! Note that you can
   only change the mode when the session is not running, so set the correct
   mode before starting the session.

 - Insert your solutions into this file where indicated (usually as "XXX")

 - Only add to the file. Do not remove or comment out anything pre-existing.

 - Make sure the entire file is accepted by ACL2s. In particular, there must
   be no "XXX" left in the code. If you don't finish all problems, comment
   the unfinished ones out. Comments should also be used for any English
   text that you may add. This file already contains many comments, so you
   can see what the syntax is.

 - When done, save your file and submit it without changing the name
   of the file.

 Below you are given a set of function definitions you can use.

|#

(definec ln (x :tl) :nat
  (if (endp x)
      0
    (1+ (ln (cdr x)))))

(definec ap (a b :tl) :tl
  (if (endp a)
      b
    (cons (car a) (ap (cdr a) b))))

(definec rv (x :tl) :tl
  (if (endp x)
      nil
    (ap (rv (cdr x)) (list (car x)))))

(definec del (a :all X :tl) :tl
  (cond ((endp X) nil)
        ((== a (car X)) (del a (cdr X)))
        (t (cons (car X) (del a (cdr X))))))

(definec el (a :all X :tl) :bool
  (^ (consp X)
     (V (== a (car X))
        (el a (cdr X)))))

(definec nodups (l :tl) :bool
  (v (endp l)
     (^ (! (el (car l) (cdr l)))
        (nodups (cdr l)))))

(definec num-unique (l :tl) :nat
  (cond ((endp l) 0)
        ((el (car l) (cdr l))
         (num-unique (cdr l)))
        (t (1+ (num-unique (cdr l))))))



#|

 Recall that for each of the definitions above we have both a
 definitional axiom, and a contract theorem.  For example for ln, we
 have the definitional axiom:

 (=> (tlp x)
     (= (ln x)
        (if (endp x)
            0
          (+ 1 (ln (cdr x))))))

 The contract theorem is:

 (=> (tlp x)
     (natp (ln x)))

 You can use definitional axioms and contract theorems for free,
 i.e., you don't have to prove anything. When you use a definitional
 axiom, say for ln, your hint is "Def ln". When you use a contract
 theorem, say for ln, your hint is "Contract ln".

 For the rest of the homework, you can assume that the following is a
 theorem.

 Lemma ln-ap
 (=> (^ (tlp x) 
        (tlp y))
     (= (ln (ap x y))
        (+ (ln x) (ln y))))

 When you use the lemma above, your hint is "Lemma ln-app"
 but you have to provide a substitution.

 We need to prove that the above is a theorem in ACL2s so that you can
 use it.

 We will do that by using named properties as follows.

|#

(property ln-ap (x y :tl)
  (= (ln (ap x y))
     (+ (ln x) (ln y))))

#|

 The above property is logically equivalent to the version of lemma
 ln-ap in the comments above, as you can write it in an equivalent
 way as follows.

 (property ln-ap (x y :all)
   (=> (^ (tlp x) 
          (tlp y))
       (= (ln (ap x y))
          (+ (ln x) (ln y)))))

 You can assume that any named properties we provide are theorems.

|#

#|

 INSTRUCTIONS FOR EQUATIONAL PROOFS:

 Use the proof format from the course book, RAP and the lecture
 notes. In particular, see figures 4.1, 4.2 and 4.3.

 Use the equational reasoning proof checker in ACL2s to check your
 proofs.  The checker is still a work in progress, but it useful for
 finding bugs in your proofs before you submit them.

 If you open this file in ACL2s without changing the filename, you can
 run the proof checker by clicking on "Validate" as we have seen
 multiple times in class.

 Before you start the homework, read about the proof format by
 clicking on

 "Proof Format Help" and "FAQ" (next to "Validate") in ACL2s.

 If you get errors, read the error message, critically examine your
 proofs and refer to the above mentioned documentation.

 If you get counterexamples, recall that they are counterexamples to
 your proof steps, not to the conjecture, so think about what hints
 may be missing from your justification.

 Here is an example proof that showcases the proof format.

|#

Conjecture 0:
(=> (tlp x)
    (=> (tlp y)
        (=> (^ (consp x)
               (!= a (car x))
               (=> (tlp (cdr x))
                   (=> (el a (cdr x))
                       (el a (ap (cdr x) y)))))
            (=> (el a x)
                (el a (ap x y))))))

Exportation:
(=> (^ (tlp x)
       (tlp y)
       (consp x)
       (!= a (car x))
       (=> (^ (tlp (cdr x))
              (el a (cdr x)))
           (el a (ap (cdr x) y)))
       (el a x))
    (el a (ap x y)))

Context:
C1. (tlp x)
C2. (tlp y)
C3. (consp x)
C4. (!= a (car x))
C5. (=> (^ (tlp (cdr x)) (el a (cdr x)))
             (el a (ap (cdr x) y)))
C6. (el a x)

Derived Context:
D1. (tlp (cdr x)) { Def tlp, C1, C3 }
D2. (el a (cdr x)) { Def el, C6, C3, C4 }
D3. (el a (ap (cdr x) y)) { C5, D1, D2, MP }

Goal: (el a (ap x y))

Proof:
(el a (ap x y))
== { Def ap, C1, C3 }
(el a (cons (car x) (ap (cdr x) y)))
== { Def el, cons axioms, C3 }
(v (== a (car x)) (el a (ap (cdr x) y)))
== { D3, PL }
t

QED

#|

 You can skip the Exportation section if no exportation is possible.
 You will not have to use Contract Completion for this homework.

 You can skip the Context section if there are no hypotheses, something
 that rarely happens. You can skip the Derived Context if you have
 nothing to derive.

 If you derive nil, you can skip the remaining sections.

 If you derive the goal (in the context or derived context), you can
 skip the remaining sections.

 Finally you need the QED to indicate the end of your proof.

 You can have multiple proofs in a file, so go ahead and try checking
 this proof. You will see that conjecture 0 passes but the rest of the
 conjectures do not because you need to populate the space between the
 conjectures and the QEDs with a proof.  As you complete proofs, click
 on "Validate" again to check them.

 You may have to add hints we normally do not add in class.  One
 example is that you have to sometimes add Contract hints. If you need
 to use arithmetic, you can just write "arith" or "arithmetic".  You
 can also use any propositional reasoning and can justify it by
 writing "PL". The proof checker always allows arithmetic and PL
 reasoning even if you don't provide the hints, but it is good style to
 do so and we will expect you to do that on exams. If you want to use
 evaluation, you have to write "Eval" and if you want to use the
 axioms involving car, cdr and cons you can write "cons axioms" or
 "car-cdr axioms" (they are equivalent).

|#

#|

 DEBUGGING INFO.

 I strongly suggest that you create copies of this file with a single
 conjecture. This will make validation go faster and will allow you to
 better localize errors. Make sure to include any definitions and 
 properties that come before the conjecture you are working on.

 Once you have proven all the conjectures, then add your solutions to
 this file, validate and submit.

 TIP: If you go to "Window", "Show View", "Problems" you will get a
 list of the problems validation discovered in your open .proof files.

 If you run into problems, you have a few options.

 0. Please first review the tips and suggestions outlined above and
    review the documentation and errors/problems ACL2s reports.
 1. Go to office hours.
 2. Post a private query with your .proof file attached. This .proof
    file can include only 1 conjecture in it. If it includes more, we
    will not provide feedback.
 3. Submit what you have, ask for a regrade and pray that manual
    review will give you some points. If your solutions are correct,
    you will get full credit.

|#

#|

 Prove the following using equational reasoning.

|#

Conjecture 1:
(=> (tlp x)
	(=> (tlp y)
	    (= (ln (ap x y)) 
           (ln (ap y x)))))

Exportation:
(=> (^ (tlp x)
	   (tlp y))
	   (= (ln (ap x y))
	   	  (ln (ap y x))))

Context:
C1. (tlp x)
C2. (tlp y)

Goal: (= (ln (ap x y)) (ln (ap y x)))

Proof:
(ln (ap x y))
== { Lemma ln-ap }
(+ (ln x) (ln y))
== { Arith }
(+ (ln y) (ln x))
== { Lemma ln-ap ((x y) (y x)), C1, C2 }
(ln (ap y x))

QED

#|
Question 2: Prove the following related conjectures.
|#


Conjecture 2a:
(=> (tlp x)
    (=> (endp x)
        (= (ln (rv x)) (ln x))))
        
Exportation:
(=> (^ (tlp x)
	   (endp x))
	(= (ln (rv x)) (ln x)))

Context:
C1. (tlp x)
C2. (endp x)

Goal: (= (ln (rv x)) (ln x))

Proof:
(= (ln (rv x)) (ln x))
== { def rv, C2 }
(= (ln nil) (ln x))
== { def ln, C2 }
(= 0 0)
== { Obvious }
t

QED

Conjecture 2b:
(=> (tlp x)
    (=> (^ (! (endp x))
	   (=> (tlp (cdr x))
               (= (ln (rv (cdr x)))
		   (ln (cdr x)))))
	(= (ln (rv x)) (ln x))))



Exportation:
(=> (^ (tlp x)
	   (! (endp x))
	   (=> (tlp (cdr x))
	   	   (= (ln (rv (cdr x)))
	   	   	  (ln (cdr x)))))
   (= (ln (rv x)) (ln x)))

Context:
C1. (tlp x)
C2. (! (endp x))
C3. (=> (tlp (cdr x))
	    (= (ln (rv (cdr x)))
	       (ln (cdr x))))
	       
Derived Context:
D1. (tlp (cdr x)) { def tlp, C1, C2 }
D2. (= (ln (rv (cdr x))) (ln (cdr x))) { C3, D1, MP }

Goal: (= (ln (rv x)) (ln x))

Proof:
(= (ln (rv x)) (ln x))
== { def rv, C1, C2 }
(= (ln (ap (rv (cdr x)) (list (car x)))) (ln x))
== { Lemma ln-ap ((x (rv (cdr x))) (y (list (car x)))) }
(= (+ (ln (rv (cdr x))) (ln (list (car x)))) (ln x))
== { D2 }
(= (+ (ln (cdr x)) (ln (list (car x)))) (ln x))
== { def ln, C2, car-cdr axioms }
(= (+ (ln (cdr x)) (1+ (ln nil))) (1+ (ln (cdr x))))
== { def ln }
(= (+ (ln (cdr x)) 1) (1+ (ln (cdr x))))
== { Arith }
(= (ln (cdr x)) (ln (cdr x)))
== { Obvious }
t

QED



#|
Question 3: Prove the following related conjectures.
|#


Conjecture 3a:
(=> (^ (tlp x)
       (tlp y))
    (=> (endp x)
        (= (ln (del a (ap x y)))
           (+ (ln (del a x)) (ln (del a y))))))

Exportation:
(=> (^ (tlp x)
	   (tlp y)
	   (endp x))
	(= (ln (del a (ap x y)))
       (+ (ln (del a x)) (ln (del a y)))))

Context:
C1. (tlp x)
C2. (tlp y)
C3. (endp x)

Goal: (= (ln (del a (ap x y))) (+ (ln (del a x)) (ln (del a y))))

Proof:
(= (ln (del a (ap x y))) (+ (ln (del a x)) (ln (del a y))))
== { def ap, C1, C2, C3 }
(= (ln (del a y)) (+ (ln (del a x)) (ln (del a y))))
== { def del, C1, C3 }
(= (ln (del a y)) (+ (ln nil) (ln (del a y))))
== { def ln }
(= (ln (del a y)) (+ 0 (ln (del a y))))
== { Arith }
(= (ln (del a y)) (ln (del a y)))
== { Obvious }
t
QED


Conjecture 4b:
(=> (tlp l)
    (=> (nodups l)
        (=> (^ (! (endp l))
               (=> (^ (tlp (cdr l))
                      (nodups (cdr l)))
                   (= (num-unique (cdr l))
                      (ln (cdr l)))))
            (= (num-unique l) (ln l)))))

Exportation:
(=> (^ (tlp l)
	   (nodups l)
	   (! (endp l))
	   (=> (^ (tlp (cdr l))
              (nodups (cdr l)))
           (= (num-unique (cdr l))
              (ln (cdr l)))))
    (= (num-unique l) (ln l)))

Context:
C1. (tlp l)
C2. (nodups l)
C3. (! (endp l))
C4. (=> (^ (tlp (cdr l))
                (nodups (cdr l)))
            (= (num-unique (cdr l))
               (ln (cdr l))))

Derived Context:
D1. (tlp (cdr l)) { def tlp, C1, C3 }
D2. (^ (! (el (car l) (cdr l))) 
	   (nodups (cdr l))) { def nodups, C2, C3, PL }
D3. (nodups (cdr l)) { D2, PL }
D4. (= (num-unique (cdr l))
	   (ln (cdr l))) { C4, D1, D3, MP }
D5. (! (el (car l) (cdr l))) { D2, PL }

Goal: (= (num-unique l) (ln l))

Proof:
(= (num-unique l) (ln l))
== { def num-unique, C3, D5 }
(= (1+ (num-unique (cdr l))) (ln l))
== { def ln, C1, C3 }
(= (1+ (num-unique (cdr l))) (1+ (ln (cdr l))))
== { Arith }
(= (num-unique (cdr l)) (ln (cdr l)))

QED

Conjecture 5:
(=> (tlp x)
    (=> (tlp y)
        (=> (^ (! (endp x))
               (!= a (car x))
               (=> (^ (tlp (cdr x))
                      (tlp y))
	               (= (ln (del a (ap (cdr x) y)))
		              (+ (ln (del a (cdr x))) (ln (del a y))))))
	        (= (ln (del a (ap x y)))
               (+ (ln (del a x)) (ln (del a y)))))))

Exportation:
(=> (^ (tlp x)
	   (tlp y)
	   (! (endp x))
	   (!= a (car x))
	   (=> (^ (tlp (cdr x))
              (tlp y))
	   	   (= (ln (del a (ap (cdr x) y)))
	   	   	  (+ (ln (del a (cdr x))) (ln (del a y))))))
	(= (ln (del a (ap x y)))
       (+ (ln (del a x)) (ln (del a y)))))

Context:
C1. (tlp x)
C2. (tlp y)
C3. (! (endp x))
C4. (!= a (car x))
C5. (=> (^ (tlp (cdr x))
                (tlp y))
	   	   (= (ln (del a (ap (cdr x) y)))
	   	   	  (+ (ln (del a (cdr x))) (ln (del a y)))))

Derived Context:
D1. (tlp (cdr x)) { def tlp, C3 }
D2. (= (ln (del a (ap (cdr x) y)))
	   (+ (ln (del a (cdr x))) (ln (del a y)))) { C5, D1, C2, PL, MP }
D3. (tlp (ap x y)) { def tlp, def ap }

Goal: 
(= (ln (del a (ap x y)))
   (+ (ln (del a x)) (ln (del a y))))

Proof:
(= (ln (del a (ap x y)))
   (+ (ln (del a x)) (ln (del a y))))
== { def ap, C3 }
(= (ln (del a (cons (car x) (ap (cdr x) y))))
   (+ (ln (del a x)) (ln (del a y))))
== { car-cdr axioms, def del, C3, C4 }
(= (ln (cons (car x) (del a (ap (cdr x) y))))
   (+ (ln (del a x)) (ln (del a y))))
== { car-cdr axioms, def ln }
(= (1+ (ln (del a (ap (cdr x) y))))
   (+ (ln (del a x)) (ln (del a y))))
== { def del, C3, C4 }
(= (1+ (ln (del a (ap (cdr x) y))))
   (+ (ln (cons (car x) (del a (cdr x)))) (ln (del a y))))
== { car-cdr axioms, def ln }
(= (1+ (ln (del a (ap (cdr x) y))))
   (+ (1+ (ln (del a (cdr x)))) (ln (del a y))))
== { Arith }
(= (ln (del a (ap (cdr x) y)))
   (+ (ln (del a (cdr x))) (ln (del a y))))

QED

; Lemma el-ap
; You can use this lemma in subsequent proofs.
(property el-ap (x y :tl a :all)
  (== (el a (ap x y))
      (v (el a x) (el a y))))

Conjecture 6a:
(=> (tlp x)
    (=> (endp x)
        (== (el a (rv x)) (el a x))))
        
Exportation:
(=> (^ (tlp x)
	   (endp x))
    (== (el a (rv x)) (el a x)))
    
Context:
C1. (tlp x)
C2. (endp x)

Derived Context:
D1. (== x nil) { C1, C2, def consp }

Goal: (== (el a (rv x)) (el a x))

Proof:
(== (el a (rv x)) (el a x))
== { def rv, C2 }
(== (el a nil) (el a x))
== { D1 }
(== (el a nil) (el a nil))
== { Obvious }
t

QED

Conjecture 6b:
(=> (tlp x)
    (=> (! (endp x))
        (=> (=> (tlp (cdr x))
                (== (el a (rv (cdr x)))
                    (el a (cdr x))))
            (== (el a (rv x)) (el a x)))))

Exportation:
(=> (^ (tlp x)
	   (! (endp x))
	   (=> (tlp (cdr x))
	   	   (== (el a (rv (cdr x)))
	   	   	   (el a (cdr x)))))
	(== (el a (rv x)) (el a x)))

Context:
C1. (tlp x)
C2. (! (endp x))
C3. (=> (tlp (cdr x))
	    (== (el a (rv (cdr x))) (el a (cdr x))))
	    
Derived Context:
D1. (tlp (cdr x)) { def tlp, C1, C2 }
D2. (== (el a (rv (cdr x))) (el a (cdr x))) { C3, D1, MP }

Goal: (== (el a (rv x)) (el a x))

Proof:
(== (el a (rv x)) (el a x))
== { def rv, C2 }
(== (el a (ap (rv (cdr x)) (list (car x)))) (el a x))
== { Lemma el-ap ((x (rv (cdr x))) (y (list (car x)))) }
(== (v (el a (rv (cdr x))) (el a (list (car x)))) (el a x))
== { C1, C2, def el }
(== (v (el a (rv (cdr x))) (el a (list (car x)))) 
	(v (== a (car x)) (el a (cdr x))))
== { def el, car-cdr axioms, PL }
(== (v (el a (rv (cdr x))) (== a (car x)) (el a nil)) 
	(v (== a (car x)) (el a (cdr x))))
== { def el, PL }
(== (v (el a (rv (cdr x))) (== a (car x))) 
	(v (== a (car x)) (el a (cdr x))))
== { D2 }
(== (v (el a (cdr x)) (== a (car x))) 
	(v (== a (car x)) (el a (cdr x))))
== { Obvious }
t

QED

